import Head from "next/head";
import { Container, Heading, Table, Thead, Tbody, Tfoot, Tr, Th, Td, TableCaption, TableContainer, Spinner, FormControl, FormLabel, Input, VStack, Button, useToast } from "@chakra-ui/react"
import { useFormik } from "formik";
import { useFetchProducts } from "@/features/product/useFetchProducts";
import { useCreateProduct } from "@/features/product/useCreateProduct";
import { useDeleteProduct } from "@/features/product/useDeleteProduct";
import { useEditProduct } from "@/features/product/useEditProduct";
// import { useCreateProduct, useDeleteProduct, useEditProduct, useFetchProducts } from "@/features/product"


export default function Home() {

  const toast = useToast()

  const { data, isLoading: productLoading, refetch: refetchProducts } = useFetchProducts({
    onError: () => {
      toast({
        title: "Ada Kesalahan",
        status: "error"
      })
    }
  })

  const formik = useFormik({
    initialValues: {
      name: "",
      price: 0,
      description: "",
      image: "",
      id: 0
    },
    onSubmit: () => {
      const { name, price, description, image, id } = formik.values

      if (id) {
        // Melakukan PATCH atau edit Product
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id
        })

        toast({
          title: "Product Edited Successfully",
          status: "success"
        })

      } else {
        // Melakukan Post Product
        createProduct({
          name,
          price: parseInt(price),
          description,
          image
        })

        toast({
          title: "Product Added Successfully",
          status: "success"
        })
      }

      formik.setFieldValue("name", ""),
        formik.setFieldValue("price", 0),
        formik.setFieldValue("description", ""),
        formik.setFieldValue("image", ""),
        formik.setFieldValue("id", "")
    }
  })

  // Add / POST Product
  const { mutate: createProduct, isLoading: addedProductLoading } = useCreateProduct({
    onSuccess: () => {
      refetchProducts()
    }
  })

  // Detele Product
  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProducts()
    }
  })

  // Edit Product
  const { mutate: editProduct, isLoading: editProductLoading } = useEditProduct({
    onSuccess: () => {
      refetchProducts()
    }
  })

  const handleFromInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value)
  }

  const confirmDelete = (productId) => {
    const showIdDelete = confirm("Are You Sure?")

    if (showIdDelete) {
      deleteProduct(productId)
      toast({
        title: "Deleted Product",
        status: "info"
      })
    }
  }

  const onEditClick = (product) => {
    formik.setFieldValue("id", product.id)
    formik.setFieldValue("name", product.name)
    formik.setFieldValue("price", product.price)
    formik.setFieldValue("description", product.description)
    formik.setFieldValue("image", product.image)
  }

  const renderProducts = () => {
    return data?.data.map((product) => {
      return (
        <Tr key={product.id}>
          <Td>{product.id}</Td>
          <Td>{product.name}</Td>
          <Td>{product.price}</Td>
          <Td>{product.description}</Td>
          <Td>
            <Button onClick={() => onEditClick(product)} colorScheme="cyan">Edit</Button>
          </Td>
          <Td>
            <Button onClick={() => confirmDelete(product.id)} colorScheme="red">Delete</Button>
          </Td>
        </Tr>
      )
    })
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>Hello World!!</Heading>
          <Table mb="6">
            <Thead>
              <Tr>
                <Th>ID</Th>
                <Th>Name</Th>
                <Th>Price</Th>
                <Th>Deskripsi</Th>
                <Th colSpan={2}>Action</Th>
              </Tr>
            </Thead>
            <Tbody>
              {renderProducts()}
              {productLoading ? <Spinner /> : null}
            </Tbody>
          </Table>
          <form onSubmit={formik.handleSubmit}>
            <VStack spacing="4">
              <FormControl display="none">
                <FormLabel>Product ID</FormLabel>
                <Input onChange={handleFromInput} name="id" value={formik.values.id} />
              </FormControl>
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <Input onChange={handleFromInput} name="name" value={formik.values.name} />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input onChange={handleFromInput} name="price" value={formik.values.price} />
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input onChange={handleFromInput} name="description" value={formik.values.description} />
              </FormControl>
              <FormControl>
                <FormLabel>Image</FormLabel>
                <Input onChange={handleFromInput} name="image" value={formik.values.image} />
              </FormControl>
              {addedProductLoading || editProductLoading ? (<Spinner />) : (<Button mb="3" type="submit">Submit Product</Button>)}
            </VStack>
          </form>
        </Container>
      </main>
    </>
  );
}
